-----------------------------------------------------------------------------
-- Module       : problem1
-- Copyright    : (c) 2010 David M. Rosenberg
-- License      : BSD3
-- 
-- Maintainer   : David Rosenberg <rosenbergdm@uchicago.edu>
-- Stability    : experimental
-- Portability  : portable
-- Created      : 03/16/10
-- Last modified: 2010 Mar 16
-- 
-- Description  :
--    DESCRIPTION HERE.
-----------------------------------------------------------------------------

----------------------------------------------------------------------------
--                                                                        --
-- Each new term in the Fibonacci sequence is generated by adding the     --
--    previous two terms. By starting with 1 and 2, the first 10 terms    --
--    will be:                                                            --
--                                                                        --
--    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...                              --
--                                                                        --
-- Find the sum of all the even-valued terms in the sequence which do     --
-- exceed four million.                                                   --
--                                                                        --
----------------------------------------------------------------------------


fib :: Int -> Int
fib 0 = 1
fib 1 = 2
fib x = fib (x - 1) + fib (x - 2)

makeFibSet :: Int -> [Int]
makeFibSet n 
  | n <= 0     = [1]
  | n == 1     = [1, 2]
  | otherwise  = reverse $ (sum . take 2 . reverse) fib' : reverse fib'
    where fib' = makeFibSet (n-1)


sumEvenUnderN :: Int -> Int
sumEvenUnderN n = (sum . filter even) [ x | x <- makeFibSet n', x < n ]
    where n' = ( (+) 1 . round . logBase 1.618 . fromIntegral) n



